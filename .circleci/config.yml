version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2.0
  codecov: codecov/codecov@3.2.3
  browser-tools: circleci/browser-tools@1.2.3

executors:
  exec-docker-node:
    docker:
      - image: cimg/node:16.11.1

commands:
  cmd-save-cache:
    steps:
      - save_cache:
          key: package-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
  cmd-restore-cache:
    steps:
      - restore_cache:
          key: package-cache-{{ checksum "package-lock.json" }}

jobs:
  install-packages:
    executor: exec-docker-node
    steps:
      - checkout
      - cmd-restore-cache
      - run:
          name: "Install packages"
          command: npm install
      - cmd-save-cache
  lint:
    executor: exec-docker-node
    steps:
      - checkout
      - cmd-restore-cache
      - run:
          name: "Lint"
          command: npm run lint
  test-tsc:
    executor: exec-docker-node
    steps:
      - checkout
      - cmd-restore-cache
      - run:
          name: "Check TypeScript files"
          command: npm run test:tsc
  test-unit-integration:
    executor: exec-docker-node
    steps:
      - checkout
      - cmd-restore-cache
      - run:
          name: "Test (Unit and Integration)"
          command: npm run test:ci
  test-unit-integration-with-reports:
    executor: exec-docker-node
    steps:
      - checkout
      - cmd-restore-cache
      - run:
          name: "Test (Unit and Integration) with reports"
          command: npm run test:ci:with:reports
      - store_artifacts:
          path: ./test-reports
      - store_test_results:
          path: ./test-reports/test-results
      - codecov/upload:
          file: ./test-reports/test-coverage/cobertura-coverage.xml
  test-sca:
    executor: exec-docker-node
    steps:
      - checkout
      - cmd-restore-cache
      - run:
          name: "Authenticate Snyk"
          command: npm run sca:auth $SNYK_TOKEN
      - run:
          name: "Scanning Code for vulnerabilities"
          command: npm run sca:test
  test-performance:
    docker:
      - image: cimg/node:16.13-browsers
    steps:
      - checkout
      - cmd-restore-cache
      - attach_workspace:
          at: .
      - browser-tools/install-chrome
      - run:
          name: "Test Performance & Insights"
          command: npm run test:perf:ci
  build-app:
    executor: exec-docker-node
    steps:
      - checkout
      - cmd-restore-cache
      - run:
          name: "Clean previous Application Build"
          command: npm run build:clean
      - run:
          name: "Build Application"
          command: npm run build:prod
      - persist_to_workspace:
          root: .
          paths:
            - 'dist'
  deploy-app:
    executor: exec-docker-node
    steps:
      - aws-cli/setup:
          profile-name: AHurynovichCV_Profile
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: AWS_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - checkout
      - cmd-restore-cache
      - attach_workspace:
            at: .
      - run:
          name: "Deploy Application"
          command: npm run deploy:s3
  build-components-library:
    executor: exec-docker-node
    steps:
      - checkout
      - cmd-restore-cache
      - run:
          name: "Clean previous Components Library Build"
          command: npm run storybook:build:clean
      - run:
          name: "Build Components Library"
          command: npm run storybook:build
      - persist_to_workspace:
          root: .
          paths:
            - 'storybook-static'
  deploy-components-library:
    executor: exec-docker-node
    steps:
      - aws-cli/setup:
          profile-name: AHurynovichCV_Profile
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: AWS_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - checkout
      - cmd-restore-cache
      - attach_workspace:
            at: .
      - run:
          name: "Deploy Components Library"
          command: npm run storybook:deploy:s3

workflows:
  Common(feature):
    when:
      not:
          equal: [ main, << pipeline.git.branch >> ]
    jobs:
      - install-packages
      - lint:
          requires:
            - install-packages
      - test-tsc:
          requires:
            - install-packages
      - test-unit-integration:
          requires:
            - install-packages
      - build-app:
          requires:
            - lint
            - test-tsc
            - test-unit-integration
  Commitment(main):
    when:
      equal: [ main, << pipeline.git.branch >> ]
    jobs:
      - install-packages
      - lint:
          requires:
            - install-packages
      - test-tsc:
          requires:
            - install-packages
      - test-unit-integration-with-reports:
          requires:
            - install-packages
      - test-sca:
          requires:
            - install-packages
      - build-app:
          requires:
            - lint
            - test-tsc
            - test-unit-integration-with-reports
            - test-sca
      - test-performance:
          requires:
            - build-app
      - hold-deploy-app:
          name: "[Deploy Application]"
          type: approval
          requires:
            - test-performance
            - build-app
      - deploy-app:
          requires:
            - "[Deploy Application]"
      - hold-deploy-components-library:
          type: approval
          name: "[Deploy Components Lib]"
          requires:
            - lint
            - test-tsc
            - test-unit-integration-with-reports
            - test-sca
      - build-components-library:
          requires:
            - "[Deploy Components Lib]"
      - deploy-components-library:
          requires:
            - build-components-library
